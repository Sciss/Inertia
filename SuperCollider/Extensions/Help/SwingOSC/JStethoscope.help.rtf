{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf420
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red86\green77\blue133;\red191\green0\blue0;\red0\green0\blue191;
\red96\green96\blue96;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs26 \cf2 SwingOSC \'d0 Java-based cross-platform replacements for Cocoa GUI classes\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs22 \cf2 This class is meant as an emulation of Stethoscope class. last mod: 21-jan-07 sciss\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf2 no-op / not working\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf2 	
\f0\b \
different behaviour\
	
\f1\b0 server			uses Server.default instead of Server.internal. the default server\
					cannot be the internal server, however.\
	threading			methods needn't be called in the app thread\
	painting			the lines are slightly thinner\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf2 	\
extended functionality\
	\
known issues / todo\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf2 	updates			sometimes the display update stops; to re-start, press + and \'d0\
					; there is jitter since the /b_getn commands are not in sync\
					with the RecordBuf UGen ; this is visible as "glitches" in the waveform\
	gridColor			(JSCScope) not yet working\
	synchronization		when changing buffers, a "/b_getn index of out range error" can occur\
					which is harmless, however\
	activity			since in this implementation the scope view doesn't get any information about\
					the scope synth, pausing the synth (pressing period) will not pause the display\
					update, so there's still OSC traffic even when the display is frozen\
					this could possibly be fixed with some trick\
	switching chan #		(bug) sometimes switching the # of channels results in wrong display\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs36 \cf0 \
JStethoscope
\f2\b0\fs18 			
\f0\b\fs24 scope window
\f1\b0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\tx7280\tx7840\ql\qnatural

\f0\b \cf0 Note: please use the abstraction layer GUI.stethoscope if possible! (see [\ul GUI\ulnone ])\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0 \cf0 \
a graphical interface to navigate on buses\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf2 Note
\f1\b0 : the following doesn't apply to SwingOSC:\
	"works only with internal server"\
instead : SwingOSC can 
\f0\b not 
\f1\b0 scope the\
internal server because it has no network address.\
However, instead of assuming Server.local to be the\
scope'd server, we also refer to Server.default, thus\
be sure to make Server.default = Server.local\cf0 \
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \ul \ulc0 the scope window can be controlled by the following keys:
\f0\b \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf2 Note
\f1\b0 : the scope panel has no initial focus as of v0.38, click once into the panel to make it active and respond to keyboard presses.
\f0\b \cf0 \
\
 J
\f1\b0 	 	one channel back\
 
\f0\b K
\f1\b0 	 	switch rate (audio vs. control)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0  L
\f1\b0 	 	one channel forward\
\

\f0\b O
\f1\b0 		jump to first hardware output channel and adjust numChannels to hardware\

\f0\b  I
\f1\b0 		jump to first hardware input channel  and adjust numChannels to hardware\
\

\f0\b space
\f1\b0  	run, if not running anyway.\

\f0\b . (period)
\f1\b0 	stop.\

\f0\b M
\f1\b0 		toggle screen size\
 \

\f0\b  + / -
\f1\b0 		zoom horizontally\

\f0\b * / _	
\f1\b0 	zoom vertically\
 
\f0\b S
\f1\b0 		change style between parallel and overlay\
\

\f0\b shift S
\f1\b0  	change style to lissajou (use only with fast computer and small buffer size)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf2 Note
\f1\b0 : in this mode, channel 0 controls horizontal beam, channel 1 vertical beam\
(unlike a normal oscilloscope in XY mode, where the second channel controls h.beam)\

\f0\b Note
\f1\b0 : there is a nice bug in SwingOSC ;-) that allows you to go back to parallel or\
overlap mode without leaving lissajou. this happens if you do not disable lissajou by\
pressing shift+S again, but instead go to the other modes pressing S.\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf0 \
shift  A
\f1\b0 	allocate buffer size so it fills the screen (to next power of two)\
		\cf2 // "this can be dangerous, might crash" (not dangerous in SwingOSC)\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf2 Note
\f1\b0 : it seems the default zoom is always such that only 1/4th of the waveform snapshot\
	 is shown ; if you don't wish to zoom out, shift+A will speed up display signifcantly\
	 because OSC traffic decreases and RecordBuf's cycle duration is much smaller\cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf0 \ul instance creation:\ulnone \
\
\
	
\f0\b *new(server, numChannels, index, bufsize, zoom, rate, view)
\f1\b0 \
		returns a new instance of Stethoscope.\
		\
	\ul by the message
\f0\b  .scope
\f1\b0 :\ulnone \
	\
	
\f0\b aServer.scope(numChannels, index, bufsize, zoom, rate)
\f1\b0 \
		opens a scope window for the server, stores it in the server instance var 
\f0\b scopeWindow\
		
\f1\b0 \
	
\f0\b aBus.scope(bufsize, zoom)
\f1\b0 \
		displays buffer channels in scope\
		\
	
\f0\b aFunction.scope(numChannels, outbus, fadeTime, bufsize, zoom)
\f1\b0 \
		plays a function and shows output in scope, returns synth object, like 
\f0\b \{ \}.play
\f1\b0 \
	
\f2\fs18 \
\

\f1\fs24 \ul \
instance methods:\ulnone \
\
\
	
\f0\b allocBuffer(size)
\f1\b0 \
		(re)allocate the buffer to a given size\
	
\f0\b run
\f1\b0 \
		start it if not playing anyway\
	
\f0\b free
\f1\b0 \
		end it, free the buffer\
		\
	
\f0\b numChannels_
\f1\b0 \
		change the number of channels displayed\
	
\f0\b index_
\f1\b0 \
		change the offset index\
	
\f0\b rate_
\f1\b0 \
		change the rate (\\audio or \\control)\
	
\f0\b size_
\f1\b0 \
		set the window size (default: 222)\
	
\f0\b zoom_
\f1\b0 \
		set horizontal zoom\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs18 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs24 \cf0 	setProperties( numChannels, index, bufsize, zoom, rate )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\b0\fs18 \cf0 	
\f1\fs24 	any of these given will adjust the scope accordingly:\
		e.g. x.setProperties(zoom:8) will only zoom.
\f2\fs18 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural
\cf3 // examples:\cf0 \
\
(\
\cf4 Server\cf0 .default = \cf4 Server\cf0 .local; \cf3 // Server.internal;\cf0 \
s = \cf4 Server\cf0 .default;\
s.boot;\
)\
(\
\{ \
	\cf4 SinOsc\cf0 .ar([225, 450, 900], 0, 0.2) \
	+ \cf4 LPF\cf0 .ar(\
		\cf4 LFPulse\cf0 .ar(226 * [1, 2, 5],[0,0.1,0.1],0.2, 0.2), \
		\cf4 JMouseX\cf0 .kr(20, 10000, 1)\
		) \
\}.jscope;\
)\
\cf3 // compare to cocoa\
\cf4 Server\cf0 .internal.boot;\
(\
\{ \
	\cf4 SinOsc\cf0 .ar([225, 450, 900], 0, 0.2) \
	+ \cf4 LPF\cf0 .ar(\
		\cf4 LFPulse\cf0 .ar(226 * [1, 2, 5],[0,0.1,0.1],0.2, 0.2), \
		\cf4 JMouseX\cf0 .kr(20, 10000, 1)\
		) \
\}.scope;\
)\
\
\cf3 // much faster with smaller buffer size (default is 4096)\cf0 \
(\
\{ \
	\cf4 SinOsc\cf0 .ar([225, 450, 900], 0, 0.2) \
	+ \cf4 LPF\cf0 .ar(\
		\cf4 LFPulse\cf0 .ar(226 * [1, 2, 5],[0,0.1,0.1],0.2, 0.2), \
		\cf4 JMouseX\cf0 .kr(20, 10000, 1)\
		) \
\}.jscope( bufsize: 1024 );\
)\
\
\cf4 JMouseBase\cf0 .makeGUI;\
\
\cf3 // server.scope only changes the properies explicitly given:\cf0 \
\
s.jscope(numChannels:5);\
s.jscope(index:12);\
s.jscope(zoom:4);\
s.jscope(index:0);\
\
s.scopeWindow.size = 600;\
s.scopeWindow.size = 222;\
\
\cf3 // scoping buses:\cf0 \
\
a = \cf4 Bus\cf0 .audio(s, 4);\
\{ \cf4 WhiteNoise\cf0 .ar(0.2.dup(4)) \}.play(s, a.index);\
\
a.jscope;\
\
c = \cf4 Bus\cf0 .control(s, 3);\
\{ \cf4 WhiteNoise\cf0 .kr(1.dup(4) * JMouseX.kr) \}.play(s, c.index);\
\
c.jscope;\
\
\cf4 JMouseBase\cf0 .makeGUI;\
\
\cf3 // note that scoping control rate buses shows block size interpolation (this is due to the\
// fact that ScopeOut.kr doesn't work yet.) 
\f1\fs24 \cf2 (RecordBuf.kr neither)
\f2\fs18 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \ul \
external use: you can pass your own view in to add a stethoscope to it;
\f2\fs18 \ulnone \
\
\
(\
w = \cf4 JSCWindow\cf0 .new(\cf5 "my own scope"\cf0 , \cf4 Rect\cf0 (20, 20, 400, 500));\
w.view.decorator = \cf4 FlowLayout\cf0 (w.view.bounds);\
c = \cf4 JStethoscope\cf0 .new(s, view:w.view);\
w.onClose = \{ c.free \}; \cf3 // don't forget this\cf0 \
w.front;\
)\
}