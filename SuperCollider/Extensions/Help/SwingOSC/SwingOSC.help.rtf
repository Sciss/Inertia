{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf420
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fnil\fcharset77 Monaco;
}
{\colortbl;\red255\green255\blue255;\red86\green77\blue133;\red0\green0\blue191;\red191\green0\blue0;
\red147\green60\blue116;\red96\green96\blue96;\red0\green115\blue0;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs26 \cf2 SwingOSC \'d0 Java-based OS cross-platform GUI classes\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs22 \cf2 last mod: 01-oct-06 sciss\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs24 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs46 \cf2 SwingOSC
\f2\b0\fs18 \cf3 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 A SwingOSC object is the client-side representation of a java GUI server. A lot of the method names are closely modelled after the Server class (the client representation of scsynth), so it's fairly easy to use.\
\
SwingOSC is also the name of the java / OSC based GUI library. 
\fs26 For an overview of GUI objects using SwingOSC, please read the help file 
\f0\b [\ul CocoaVsJava\ulnone ]
\f1\b0 .\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b \cf2 The default Server\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\fs30 \cf0 \ul \ulc0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\b0\fs24 \cf0 \ulnone There is always a default Server, which is stored in the class variable 
\f2\fs20 \cf3 default
\f1\fs24 \cf0 . Any GUI components created without a target will be created on the default server. At startup, a server representation referring to the local machine is created and stored both in the class variables 
\f2\fs20 \cf3 local
\f1\fs24 \cf0  and 
\f2\fs20 \cf3 default
\f1\fs24 \cf0 . When you boot SwingOSC manually from a terminal (see below), please note that this default server assumes SwingOSC to listen at TCP port 57111 and to send an initial ping message to sclang (127.0.0.1:57120). If the initial ping is not send, you will have to call 
\f2\fs20 \cf3 initTree
\f1\fs24 \cf0  manually.\
\
Note that in this document we will assume that the global variable 
\f2\fs20 \cf3 g
\f1\fs24 \cf0  is assigned to the default server, by executing the following line:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0   	g = \cf3 SwingOSC\cf0 .default;	\cf4 // 
\fs62 !
\fs20 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs26 \cf2 \
Booting the Server from a Terminal
\f1\b0\fs24 \cf0 \
\
You can boot a SwingOSC server from within sclang with the boot method (see below). However sometimes you may wish to boot it from a terminal or by double clicking an executable shell script in the Finder. Please refer to the Document 
\f2\fs20 "readme.html"
\f1\fs24  in the main SwingOSC folder to learn about launching the server from a terminal. You usually launch the server by the following command:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 	cd \cf5 <mainSwingOSCFolder>\cf0 \
  	java -jar build/SwingOSC.jar -t 57111 -i -L\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
Make sure to use 
\f0\b TCP port 57111
\f1\b0  and restrict OSC communication to the local machine (
\f2\fs20 -L
\f1\fs24  option) when possible.\
\
If you prefer to use UDP transport, use 
\f2\fs20 -u
\f1\fs24  instead of 
\f2\fs20 -t
\f1\fs24 .\
\
To quit the server press 
\f2\fs20 Ctrl-C
\f1\fs24  in the terminal.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs26 \cf2 Booting and Quitting the Server from within SuperCollider
\f1\b0\fs24 \cf0 \
\
	Method signatures:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 		\cf5 <aServer>\cf0 .boot( \cf5 <startAliveThread = true>\cf0  )\
		\cf5 <aServer>\cf0 .quit\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 		\
	Examples:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 	  	g.boot;\
  		\cf4 // ...\cf0 \
		g.quit;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
	
\f0\b\fs26 \cf2 Note:
\f1\b0\fs24 \cf0 	
\f0\b this assumes that the file "SwingOSC.jar" has been copied into the main SuperCollider folder.
\f1\b0 \
			If you want to use a different install location, set the class variable program appropriately. \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 		  	\cf3 SwingOSC\cf0 .program = \cf6 "java -jar \cf5 <completePathToAndIncludingSwingOSC.jar>\cf6 "\cf0 ;\
		  	\
		  	
\f1\fs24 Here's for example, what my 
\f2\fs20 ~/scwork/startup.rtf
\f1\fs24  reads:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural\pardirnatural

\f2\fs20 \cf0 			\cf3 SwingOSC\cf0 .program	= \cf6 "java -Xdock:icon=/Users/rutz/Documents/workspace/SwingOSC/application.icns -Xdock:name=SwingOSC -jar /Users/rutz/Documents/workspace/SwingOSC/build/SwingOSC.jar"\cf0 ;\
			g				= \cf3 SwingOSC\cf0 .default;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
\
You can register a custom function to be executed when the server has been booted. For example:\
\
	Method signature:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 		\cf5 <aServer>\cf0 .doWhenBooted( \cf5 <func>\cf0 , \cf5 <timeout = 20>\cf0  )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 		\
	Example:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 (\
	g.doWhenBooted(\{\
		\cf3 JSCWindow\cf0 .viewPalette;\
	\});\
  	g.boot;\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
Differences to the audio 
\f2\fs20 \cf3 Server
\f1\fs24 \cf0 : 
\f2\fs20 \cf3 doWhenBooted
\f1\fs24 \cf0 's second argument here is timeout in seconds.\
\
Alternatively you can combine the two methods above:\
\
	Method signature:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 		\cf5 <aServer>\cf0 .waitForBoot( \cf5 <func>\cf0 , \cf5 <timeout = 20>\cf0  )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
	Example:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 \
(\
	g.waitForBoot(\{\
		\cf3 JSCWindow\cf0 .viewPalette;\
	\});\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
\
On Mac OS 10.3.9 (Panther) please read the document "SuperColliderBUGS.rtf" to find out about possible boot problems.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs26 \cf2 Sending Messages to the Server and Receiving Replies
\f1\b0\fs24 \cf0 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 	Method signatures:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 		\cf4 // send a single message\cf0 \
		\cf5 <aServer>\cf0 .sendMsg( \cf5 <arg1>\cf0 , \cf5 <arg2> ...\cf0  )\
		\cf4 // send a single message as array\cf0 \
		\cf5 <aServer>\cf0 .listSendMsg([ \cf5 <arg1>\cf0 , \cf5 <arg2> ...\cf0  ])\
		\cf4 // send a bundle\cf0 \
		\cf5 <aServer>\cf0 .sendBundle( time, \cf5 <argArray1>\cf0 , \cf5 <argArray2> ...\cf0  )\
		\cf4 // send a bundle as array\cf0 \
		\cf5 <aServer>\cf0 .listSendBundle( time, [ \cf5 <argArray1>\cf0 , \cf5 <argArray2> ...\cf0  ])\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
	Examples:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 		g.sendMsg( \cf7 '/print'\cf0 , \cf7 '['\cf0 , \cf7 '/local'\cf0 , \cf7 \\OS_Name\cf0 , \cf7 '['\cf0 , \cf7 '/method'\cf0 , \cf7 'java.lang.System'\cf0 , \cf7 \\getProperty\cf0 , \cf7 'os.name'\cf0 , \cf7 ']'\cf0 , \cf7 ']'\cf0 );\
		g.listSendMsg([ \cf7 '/print'\cf0 , \cf7 '['\cf0 , \cf7 '/local'\cf0 , \cf7 \\OS_Version\cf0 , \cf7 '['\cf0 , \cf7 '/method'\cf0 , \cf7 'java.lang.System'\cf0 , \cf7 \\getProperty\cf0 , \cf7 'os.version'\cf0 , \cf7 ']'\cf0 , \cf7 ']'\cf0  ]);\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
	Note :	bundle times should always be set to 
\f2\fs20 \cf3 nil
\f1\fs24 \cf0  for now, since they are not used by SwingOSC. this behaviour may change\
			in the future, so your code is safe if you use 
\f2\fs20 \cf3 nil
\f1\fs24 \cf0 .\
\
To receive replies, you can set up a normal 
\f2\fs20 \cf3 OSCresponderNode
\f1\fs24 \cf0 . Note for this to work, for some reason you 
\f0\b must
\f1\b0  supply an address argument, 
\f2\fs20 \cf3 nil
\f1\fs24 \cf0  will not work. Also note that 
\f2\fs20 \cf3 OSCpathResponder
\f1\fs24 \cf0  seems to be not working with SwingOSC for some reason. Examples:\
\
		\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 (\
	\cf3 OSCresponderNode\cf0 ( g.addr, \cf7 '/info'\cf0 , \{ \cf3 arg\cf0  time, resp, msg;\
		\cf3 var\cf0  choice, rgb;\
	\
		if( msg[ 1 ].asSymbol === \cf7 \\confirm\cf0 , \{\
			resp.remove;\
			choice = msg[ 2 ];\
			(\cf6 "User's choice : "\cf0  ++ [ \cf6 "Ok"\cf0 , \cf3 nil\cf0 , \cf6 "Cancel"\cf0  ].at( choice )).postln;\
			if( choice == 0, \{\
				\cf3 OSCresponderNode\cf0 ( g.addr, \cf7 '/set'\cf0 , \{ \cf3 arg\cf0  time, resp, msg;\
					if( msg[ 1 ].asSymbol === \cf7 \\color\cf0 , \{\
						resp.remove;\
						msg.postln;\
						rgb = msg[ 3 ];\
						(\cf6 "New colour : "\cf0  ++ \cf3 Color\cf0 .new255( (rgb >> 16 & 0xFF), (rgb >> 8) & 0xFF, rgb & 0xFF )).postln;\
					\});\
				\}).add;\
				g.sendBundle( \cf3 nil\cf0 ,\
					[ \cf7 '/local'\cf0 , \cf7 \\color\cf0 , \cf7 '['\cf0 , \cf7 '/method'\cf0 , \cf7 \\colorChooser\cf0 , \cf7 \\getColor\cf0 , \cf7 ']'\cf0  ],\
					[ \cf7 '/get'\cf0 , \cf7 \\color\cf0 , \cf7 \\RGB\cf0  ]);\
			\});\
		\});\
	\}).add;\
	\cf4 // note : showConfirmDialog is modal and will block OSC processing in SwingOSC\cf0 \
	\cf4 // until the dialog is closed. this is just an example anyway\cf0 \
	g.sendBundle( \cf3 nil\cf0 ,\
		[ \cf7 '/local'\cf0 , \cf7 \\colorChooser\cf0 , \cf7 '['\cf0 , \cf7 '/new'\cf0 , \cf7 'javax.swing.JColorChooser'\cf0 , \cf7 ']'\cf0  ],\
		[ \cf7 '/query'\cf0 , \cf7 \\confirm\cf0 , \cf7 '['\cf0 , \cf7 '/method'\cf0 , \cf7 'javax.swing.JOptionPane'\cf0 , \cf7 \\showConfirmDialog\cf0 ,\
			\cf7 '['\cf0 , \cf7 '/ref'\cf0 , \cf7 \\null\cf0 , \cf7 ']'\cf0 , \cf7 '['\cf0 , \cf7 '/ref'\cf0 , \cf7 \\colorChooser\cf0 , \cf7 ']'\cf0 , \cf6 "Select a colour"\cf0 , 2, \cf7 ']'\cf0  ]);\
)
\f1\fs24 \
\
\
The above example can be simplified by using the 
\f2\fs20 \cf3 sendMsgSync
\f1\fs24 \cf0  method. This must be called inside a 
\f2\fs20 \cf3 Routine
\f1\fs24 \cf0  as for example created by 
\f2\fs20 \cf3 fork
\f1\fs24 \cf0 :\
\
	Method signature:\

\f2\fs20 		\cf4 // send a single message and wait for a success or failure reply\cf0 \
		\cf5 <aServer>\cf0 .sendMsgSync( \cf5 <msgArray>\cf0 , \cf5 <successMsgArray>\cf0 , \cf5 <failureMsgArray>\cf0 , \cf5 <timeout = 4>\cf0 , \cf5 <condition>\cf0  )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 		\
	Example:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 \
(\
fork \{\
	\cf3 var\cf0  choice, rgb, msg;\
\
	g.sendMsg( \cf7 '/local'\cf0 , \cf7 \\colorChooser\cf0 , \cf7 '['\cf0 , \cf7 '/new'\cf0 , \cf7 'javax.swing.JColorChooser'\cf0 , \cf7 ']'\cf0  );\
	msg = g.sendMsgSync([ \cf7 '/query'\cf0 , \cf7 \\confirm\cf0 , \cf7 '['\cf0 , \cf7 '/method'\cf0 , \cf7 'javax.swing.JOptionPane'\cf0 , \cf7 \\showConfirmDialog\cf0 ,\
							\cf7 '['\cf0 , \cf7 '/ref'\cf0 , \cf7 \\null\cf0 , \cf7 ']'\cf0 , \cf7 '['\cf0 , \cf7 '/ref'\cf0 , \cf7 \\colorChooser\cf0 , \cf7 ']'\cf0 , \cf6 "Select a colour"\cf0 , 2, \cf7 ']'\cf0  ],\
		[ \cf7 '/info'\cf0 , \cf7 \\confirm\cf0  ], timeout: 60 );\
	if( msg.notNil, \{\
		choice = msg[ 2 ];\
		(\cf6 "User's choice : "\cf0  ++ [ \cf6 "Ok"\cf0 , \cf3 nil\cf0 , \cf6 "Cancel"\cf0  ].at( choice )).postln;\
		if( choice == 0, \{\
			g.sendMsg( \cf7 '/local'\cf0 , \cf7 \\color\cf0 , \cf7 '['\cf0 , \cf7 '/method'\cf0 , \cf7 \\colorChooser\cf0 , \cf7 \\getColor\cf0 , \cf7 ']'\cf0  );\
			msg = g.sendMsgSync([ \cf7 '/get'\cf0 , \cf7 \\color\cf0 , \cf7 \\RGB\cf0  ], [ \cf7 '/set'\cf0 , \cf7 \\color\cf0 , \cf7 \\RGB\cf0  ]);\
			if( msg.notNil, \{\
				rgb = msg[ 3 ];\
				(\cf6 "New colour : "\cf0  ++ \cf3 Color\cf0 .new255( (rgb >> 16 & 0xFF), (rgb >> 8) & 0xFF, rgb & 0xFF )).postln;\
			\}, \{\
				\cf6 "Timeout!"\cf0 .warn;\
			\});\
		\});\
	\}, \{\
		\cf6 "This takes way too long, i'm giving up"\cf0 .postln;\
	\});\
\};\
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
	Note: a 
\f2\fs20 \cf3 timeout
\f1\fs24 \cf0  of 
\f2\fs20 \cf3 nil
\f1\fs24 \cf0  means no timeout (waits forever).\
	\
	\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs26 \cf2 Instantiating a new Server
\f1\b0\fs24 \cf0 \
\
	Method signature:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 		\cf5 <aServer> \cf0 = SwingOSC.new( \cf5 <name>, <addr>, <options>, <clientID = 0>\cf0  )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 		\
	Examples:\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 (\
  	f = \cf3 SwingOSC\cf0 .new( \cf7 \\secondSwing\cf0 , \cf3 NetAddr\cf0 ( \cf6 "localhost"\cf0 , 44444 ));\
  	f.options.protocol = \cf7 \\udp\cf0 ;	\cf4 // if you don't want tcp\cf0 \
  	f.waitForBoot(\{\
  		\cf3 var\cf0  win;\
  		\
  		win = \cf3 JSCWindow\cf0 ( server: f );\
  		win.onClose = \{ f.quit; \};\
  		\cf3 JSCStaticText\cf0 ( win.view, \cf3 Rect\cf0 ( 40, 40, 100, 30 )).font_( \cf3 JFont\cf0 ( \cf6 "Helvetica"\cf0 , 36 )).string_( \cf6 "Kieka"\cf0  );\
  		win.front;\
  	\});\
  	\cf4 // use this on MacOS 10.3.9 Panther if booting blocks:\cf0 \
  	\cf4 // g.unblockPipe;\cf0 \
)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
\
	Note: 
\f2\fs20 \cf3 options
\f1\fs24 \cf0  should be 
\f2\fs20 \cf3 nil
\f1\fs24 \cf0  (default options) or an instance of 
\f0\b [\ul SwingOptions\ulnone ]
\f1\b0 \
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs26 \cf2 Adding custom Java classes to the class path
\f1\b0\fs24 \cf0 \
\
	Method signature:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 		\cf5 <aServer>\cf0 .addClasses( \cf5 <url1>\cf0 , \cf5 <url2> ...\cf0  )\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
	Example: see 
\f2\fs20 \cf6 "DynamicClasses.rtf"
\f1\fs24 \cf0  in examples for folder.\
\
URLs can point to single class files, jar archives or folders containing class files. Make sure to use proper 
\f2\fs20 \cf3 file://
\f1\fs24 \cf0  URLs and not plain path names for files!\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f0\b\fs26 \cf2 \
\
Class Methods
\f1\b0\fs24 \cf0 \
\
	Method signatures:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f2\fs20 \cf0 		\cf3 SwingOSC\cf0 .local;	\cf4 // reference to default local server\cf0 \
		\cf3 SwingOSC\cf0 .default;	\cf4 // reference to default local server; this will be used in GUI elements when no explicit server is specified\cf0 \
		\cf3 SwingOSC\cf0 .quitAll;	\cf4 // quit all registered servers ; UNTESTED\cf0 \
		\cf3 SwingOSC\cf0 .killAll;	\cf4 // query the system for any SwingOSC server apps and hard quit them ; UNTESTED\cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\ql\qnatural

\f1\fs24 \cf0 \
}